--- a/src/Log.hxx
+++ b/src/Log.hxx
@@ -45,7 +45,10 @@ void
 LogFmt(LogLevel level, const Domain &domain,
        const S &format_str, Args&&... args) noexcept
 {
-#if FMT_VERSION >= 70000
+#if FMT_VERSION >= 90000
+	return LogVFmt(level, domain, format_str,
+		       fmt::make_format_args(args...));
+#elif FMT_VERSION >= 70000
 	return LogVFmt(level, domain, fmt::to_string_view(format_str),
 		       fmt::make_args_checked<Args...>(format_str,
 						       args...));
--- a/src/client/Response.hxx
+++ b/src/client/Response.hxx
@@ -82,7 +82,10 @@ public:
 
 	template<typename S, typename... Args>
 	bool Fmt(const S &format_str, Args&&... args) noexcept {
-#if FMT_VERSION >= 70000
+#if FMT_VERSION >= 90000
+		return VFmt(format_str,
+			    fmt::make_format_args(args...));
+#elif FMT_VERSION >= 70000
 		return VFmt(fmt::to_string_view(format_str),
 			    fmt::make_args_checked<Args...>(format_str,
 							    args...));
@@ -109,7 +112,10 @@ public:
 	template<typename S, typename... Args>
 	void FmtError(enum ack code,
 		      const S &format_str, Args&&... args) noexcept {
-#if FMT_VERSION >= 70000
+#if FMT_VERSION >= 90000
+		return VFmtError(code, format_str,
+				 fmt::make_format_args(args...));
+#elif FMT_VERSION >= 70000
 		return VFmtError(code, fmt::to_string_view(format_str),
 				 fmt::make_args_checked<Args...>(format_str,
 								 args...));
--- a/src/decoder/plugins/FfmpegDecoderPlugin.cxx
+++ b/src/decoder/plugins/FfmpegDecoderPlugin.cxx
@@ -31,6 +31,7 @@
 #include "lib/ffmpeg/Format.hxx"
 #include "lib/ffmpeg/Codec.hxx"
 #include "lib/ffmpeg/SampleFormat.hxx"
+#include "lib/ffmpeg/LibFmt.hxx"
 #include "../DecoderAPI.hxx"
 #include "FfmpegMetaData.hxx"
 #include "FfmpegIo.hxx"
--- /dev/null
+++ b/src/lib/ffmpeg/LibFmt.hxx
@@ -0,0 +1,39 @@
+/*
+ * Copyright 2003-2022 The Music Player Daemon Project
+ * http://www.musicpd.org
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#pragma once
+
+extern "C" {
+#include <libavutil/samplefmt.h>
+}
+
+#include <fmt/format.h>
+
+template<>
+struct fmt::formatter<AVSampleFormat> : formatter<string_view>
+{
+	template<typename FormatContext>
+	auto format(const AVSampleFormat format, FormatContext &ctx) {
+		const char *name = av_get_sample_fmt_name(format);
+		if (name == nullptr)
+			name = "?";
+
+		return formatter<string_view>::format(name, ctx);
+	}
+};
