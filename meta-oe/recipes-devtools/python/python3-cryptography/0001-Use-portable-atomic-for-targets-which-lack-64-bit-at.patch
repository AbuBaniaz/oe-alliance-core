From 7f13fc9a472ed6578e7fc61a7c4c6b9194320486 Mon Sep 17 00:00:00 2001
From: Captain <openatv@gmail.com>
Date: Sun, 18 Feb 2024 10:11:28 +0100
Subject: [PATCH] Use portable-atomic for targets which lack 64-bit atomics
 used to check interpreter ID.

I chose to make the dependency mandatory instead of optional as portable-atomic
itself just forwards to the native atomics when they are available so making
that choice part of our build system is not really necessary. Personally, I was
unable to perceive any noticeable compile-time hit from adding it.
---
 Cargo.toml            | 1 +
 src/impl_/pymodule.rs | 2 +-
 2 files changed, 2 insertions(+), 1 deletion(-)

diff --git a/Cargo.toml b/Cargo.toml
index 175b40a1..9275c665 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -19,6 +19,7 @@ cfg-if = "1.0"
 libc = "0.2.62"
 parking_lot = ">= 0.11, < 0.13"
 memoffset = "0.9"
+portable-atomic = "1.0"
 
 # ffi bindings to the python interpreter, split into a separate crate so they can be used independently
 pyo3-ffi = { path = "pyo3-ffi", version = "=0.20.2" }
diff --git a/src/impl_/pymodule.rs b/src/impl_/pymodule.rs
index 8ec96345..7c5243fc 100644
--- a/src/impl_/pymodule.rs
+++ b/src/impl_/pymodule.rs
@@ -3,7 +3,7 @@
 use std::cell::UnsafeCell;
 
 #[cfg(all(not(PyPy), Py_3_9, not(all(windows, Py_LIMITED_API, not(Py_3_10)))))]
-use std::sync::atomic::{AtomicI64, Ordering};
+use portable_atomic::{AtomicI64, Ordering};
 
 #[cfg(not(PyPy))]
 use crate::exceptions::PyImportError;
-- 
2.43.0.windows.1

