From 6e78f8e555a6bd94517bb1b3ebe31e62be374910 Mon Sep 17 00:00:00 2001
From: Captain <captain.onboard@web.de>
Date: Wed, 17 Jan 2024 11:12:55 +0100
Subject: [PATCH] fix build with setuptools

---
 meta-oe/conf/layer.conf                       |   1 +
 .../samba/asn1compile-native.bb               |   2 +-
 .../samba/samba-source.inc                    |   1 +
 .../samba/samba/setuptools.patch              | 125 ++++++++++++++++++
 .../python/python3-gdata-python3_3.0.1.bb     |   1 -
 .../cairo/cairo/CVE-2018-19876.patch          |  34 +++++
 .../cairo/cairo/CVE-2019-6461.patch           |  20 +++
 .../cairo/cairo/CVE-2019-6462.patch           |  40 ++++++
 .../cairo/cairo/CVE-2020-35492.patch          |  60 +++++++++
 ...tmap_surface-bsc1036789-CVE-2017-7475.diff |  22 +++
 .../recipes-graphics/cairo/cairo_1.16.0.bb    | 106 +++++++++++++++
 .../recipes-oe-alliance/enigma2/enigma2.bb    |   1 -
 12 files changed, 410 insertions(+), 3 deletions(-)
 create mode 100644 meta-oe/recipes-connectivity/samba/samba/setuptools.patch
 create mode 100644 meta-oe/recipes-graphics/cairo/cairo/CVE-2018-19876.patch
 create mode 100644 meta-oe/recipes-graphics/cairo/cairo/CVE-2019-6461.patch
 create mode 100644 meta-oe/recipes-graphics/cairo/cairo/CVE-2019-6462.patch
 create mode 100644 meta-oe/recipes-graphics/cairo/cairo/CVE-2020-35492.patch
 create mode 100644 meta-oe/recipes-graphics/cairo/cairo/cairo-get_bitmap_surface-bsc1036789-CVE-2017-7475.diff
 create mode 100644 meta-oe/recipes-graphics/cairo/cairo_1.16.0.bb

diff --git a/meta-oe/conf/layer.conf b/meta-oe/conf/layer.conf
index 9ceb9ecfa5..24b4ddb8f2 100644
--- a/meta-oe/conf/layer.conf
+++ b/meta-oe/conf/layer.conf
@@ -129,6 +129,7 @@ PREFERRED_VERSION_python3-google-api-python-client ?= "2.%"
 PREFERRED_VERSION_nodejs ?= "20.%"
 PREFERRED_VERSION_nodejs:mipsel = "18.17.1"
 PREFERRED_VERSION_python3-bcrypt:mipsel = "4.0.1"
+PREFERRED_VERSION_cairo = "1.16.0"
 
 
 VIRTUAL-RUNTIME_base-utils-hwclock = " "
diff --git a/meta-oe/recipes-connectivity/samba/asn1compile-native.bb b/meta-oe/recipes-connectivity/samba/asn1compile-native.bb
index 780f7491be..cdcbaf21bd 100644
--- a/meta-oe/recipes-connectivity/samba/asn1compile-native.bb
+++ b/meta-oe/recipes-connectivity/samba/asn1compile-native.bb
@@ -2,7 +2,7 @@ require samba-source.inc
 
 S = "${WORKDIR}/samba-${PV}"
 
-inherit pkgconfig cpan-base perlnative python3native native
+inherit pkgconfig cpan-base perlnative python3native native setuptools3
 
 #DEPENDS += "libxslt-native docbook-xsl-stylesheets-native e2fsprogs readline virtual/libiconv zlib popt"
 #DEPENDS += "python3native"
diff --git a/meta-oe/recipes-connectivity/samba/samba-source.inc b/meta-oe/recipes-connectivity/samba/samba-source.inc
index 2b1954eae0..d1856c3e1c 100644
--- a/meta-oe/recipes-connectivity/samba/samba-source.inc
+++ b/meta-oe/recipes-connectivity/samba/samba-source.inc
@@ -49,6 +49,7 @@ SRC_URI = "${SAMBA_MIRROR}/stable/samba-${PV}.tar.gz \
            file://users.map \
            file://smbpasswd \
            file://volatiles.03_samba \
+           file://setuptools.patch \
            "
 
 SRC_URI:append:arm = " \
diff --git a/meta-oe/recipes-connectivity/samba/samba/setuptools.patch b/meta-oe/recipes-connectivity/samba/samba/setuptools.patch
new file mode 100644
index 0000000000..24238dfcb2
--- /dev/null
+++ b/meta-oe/recipes-connectivity/samba/samba/setuptools.patch
@@ -0,0 +1,125 @@
+--- a/third_party/waf/waflib/Tools/python.py	2024-01-13 20:36:25.491117900 +0100
++++ b/third_party/waf/waflib/Tools/python.py	2024-01-13 20:56:53.925777600 +0100
+@@ -53,7 +53,17 @@
+ Piece of Python code used in :py:class:`waflib.Tools.python.pyo` and :py:class:`waflib.Tools.python.pyc` for byte-compiling python files
+ """
+ 
+-DISTUTILS_IMP = ['from distutils.sysconfig import get_config_var, get_python_lib']
++DISTUTILS_IMP = """
++try:
++	from distutils.sysconfig import get_config_var, get_python_lib
++except ImportError:
++	from sysconfig import get_config_var, get_path
++	def get_python_lib(*k, **kw):
++		keyword='platlib' if kw.get('plat_specific') else 'purelib'
++		if 'prefix' in kw:
++			return get_path(keyword, vars={'installed_base': kw['prefix'], 'platbase': kw['prefix']})
++		return get_path(keyword)
++""".splitlines()
+ 
+ @before_method('process_source')
+ @feature('py')
+@@ -219,7 +229,7 @@
+ 	try:
+ 		out = self.cmd_and_log(self.env.PYTHON + ['-c', '\n'.join(program)], env=os_env)
+ 	except Errors.WafError:
+-		self.fatal('The distutils module is unusable: install "python-devel"?')
++		self.fatal('Could not run %r' % self.env.PYTHON)
+ 	self.to_log(out)
+ 	return_values = []
+ 	for s in out.splitlines():
+@@ -291,7 +301,8 @@
+ @conf
+ def check_python_headers(conf, features='pyembed pyext'):
+ 	"""
+-	Check for headers and libraries necessary to extend or embed python by using the module *distutils*.
++	Check for headers and libraries necessary to extend or embed python.
++	It may use the module *distutils* or sysconfig in newer Python versions.
+ 	On success the environment variables xxx_PYEXT and xxx_PYEMBED are added:
+ 
+ 	* PYEXT: for compiling python extensions
+@@ -439,7 +450,7 @@
+ 		env.LIBPATH_PYEXT = env.LIBPATH_PYEMBED
+ 		env.LIB_PYEXT = env.LIB_PYEMBED
+ 
+-	conf.to_log("Include path for Python extensions (found via distutils module): %r\n" % (dct['INCLUDEPY'],))
++	conf.to_log("Found an include path for Python extensions: %r\n" % (dct['INCLUDEPY'],))
+ 	env.INCLUDES_PYEXT = [dct['INCLUDEPY']]
+ 	env.INCLUDES_PYEMBED = [dct['INCLUDEPY']]
+ 
+@@ -452,15 +463,21 @@
+ 		env.append_unique('CXXFLAGS_PYEXT', ['-fno-strict-aliasing'])
+ 
+ 	if env.CC_NAME == "msvc":
+-		from distutils.msvccompiler import MSVCCompiler
+-		dist_compiler = MSVCCompiler()
+-		dist_compiler.initialize()
+-		env.append_value('CFLAGS_PYEXT', dist_compiler.compile_options)
+-		env.append_value('CXXFLAGS_PYEXT', dist_compiler.compile_options)
+-		env.append_value('LINKFLAGS_PYEXT', dist_compiler.ldflags_shared)
++		try:
++			from distutils.msvccompiler import MSVCCompiler
++		except ImportError:
++			# From https://github.com/python/cpython/blob/main/Lib/distutils/msvccompiler.py
++			env.append_value('CFLAGS_PYEXT', [ '/nologo', '/Ox', '/MD', '/W3', '/GX', '/DNDEBUG'])
++			env.append_value('CXXFLAGS_PYEXT', [ '/nologo', '/Ox', '/MD', '/W3', '/GX', '/DNDEBUG'])
++			env.append_value('LINKFLAGS_PYEXT', ['/DLL', '/nologo', '/INCREMENTAL:NO'])
++		else:
++			dist_compiler = MSVCCompiler()
++			dist_compiler.initialize()
++			env.append_value('CFLAGS_PYEXT', dist_compiler.compile_options)
++			env.append_value('CXXFLAGS_PYEXT', dist_compiler.compile_options)
++			env.append_value('LINKFLAGS_PYEXT', dist_compiler.ldflags_shared)
+ 
+-	# See if it compiles
+-	conf.check(header_name='Python.h', define_name='HAVE_PYTHON_H', uselib='PYEMBED', fragment=FRAG, errmsg='Distutils not installed? Broken python installation? Get python-config now!')
++	conf.check(header_name='Python.h', define_name='HAVE_PYTHON_H', uselib='PYEMBED', fragment=FRAG, errmsg='Could not build a Python embedded interpreter')
+ 
+ @conf
+ def check_python_version(conf, minver=None):
+@@ -506,17 +523,9 @@
+ 		else:
+ 			# Finally, try to guess
+ 			if Utils.is_win32:
+-				(python_LIBDEST, pydir) = conf.get_python_variables(
+-					  ["get_config_var('LIBDEST') or ''",
+-					   "get_python_lib(standard_lib=0) or ''"])
++				(pydir,) = conf.get_python_variables(["get_python_lib(standard_lib=0) or ''"])
+ 			else:
+-				python_LIBDEST = None
+-				(pydir,) = conf.get_python_variables( ["get_python_lib(standard_lib=0, prefix=%r) or ''" % conf.env.PREFIX])
+-			if python_LIBDEST is None:
+-				if conf.env.LIBDIR:
+-					python_LIBDEST = os.path.join(conf.env.LIBDIR, 'python' + pyver)
+-				else:
+-					python_LIBDEST = os.path.join(conf.env.PREFIX, 'lib', 'python' + pyver)
++				(pydir,) = conf.get_python_variables(["get_python_lib(standard_lib=0, prefix=%r) or ''" % conf.env.PREFIX])
+ 
+ 		if 'PYTHONARCHDIR' in conf.env:
+ 			# Check if --pythonarchdir was specified
+@@ -526,7 +535,7 @@
+ 			pyarchdir = conf.environ['PYTHONARCHDIR']
+ 		else:
+ 			# Finally, try to guess
+-			(pyarchdir, ) = conf.get_python_variables( ["get_python_lib(plat_specific=1, standard_lib=0, prefix=%r) or ''" % conf.env.PREFIX])
++			(pyarchdir, ) = conf.get_python_variables(["get_python_lib(plat_specific=1, standard_lib=0, prefix=%r) or ''" % conf.env.PREFIX])
+ 			if not pyarchdir:
+ 				pyarchdir = pydir
+ 
+@@ -585,13 +594,12 @@
+ 		if ret == 'unknown version':
+ 			conf.fatal('Could not check the %s version' % module_name)
+ 
+-		from distutils.version import LooseVersion
+ 		def num(*k):
+ 			if isinstance(k[0], int):
+-				return LooseVersion('.'.join([str(x) for x in k]))
++				return Utils.loose_version('.'.join([str(x) for x in k]))
+ 			else:
+-				return LooseVersion(k[0])
+-		d = {'num': num, 'ver': LooseVersion(ret)}
++				return Utils.loose_version(k[0])
++		d = {'num': num, 'ver': Utils.loose_version(ret)}
+ 		ev = eval(condition, {}, d)
+ 		if not ev:
+ 			conf.fatal('The %s version does not satisfy the requirements' % module_name)
diff --git a/meta-oe/recipes-devtools/python/python3-gdata-python3_3.0.1.bb b/meta-oe/recipes-devtools/python/python3-gdata-python3_3.0.1.bb
index 29da46ac9b..9f11d59929 100644
--- a/meta-oe/recipes-devtools/python/python3-gdata-python3_3.0.1.bb
+++ b/meta-oe/recipes-devtools/python/python3-gdata-python3_3.0.1.bb
@@ -15,7 +15,6 @@ SRC_URI += "file://0001-fix-compile-warning.patch"
 deltask do_populate_sysroot
 
 RDEPENDS:${PN} = " \
-    ${PYTHON_PN}-distutils \
     ${PYTHON_PN}-json \
     ${PYTHON_PN}-netserver \
     ${PYTHON_PN}-stringold \
diff --git a/meta-oe/recipes-graphics/cairo/cairo/CVE-2018-19876.patch b/meta-oe/recipes-graphics/cairo/cairo/CVE-2018-19876.patch
new file mode 100644
index 0000000000..4252a5663b
--- /dev/null
+++ b/meta-oe/recipes-graphics/cairo/cairo/CVE-2018-19876.patch
@@ -0,0 +1,34 @@
+CVE: CVE-2018-19876
+Upstream-Status: Backport
+Signed-off-by: Ross Burton <ross.burton@intel.com>
+
+From 90e85c2493fdfa3551f202ff10282463f1e36645 Mon Sep 17 00:00:00 2001
+From: Carlos Garcia Campos <cgarcia@igalia.com>
+Date: Mon, 19 Nov 2018 12:33:07 +0100
+Subject: [PATCH] ft: Use FT_Done_MM_Var instead of free when available in
+ cairo_ft_apply_variations
+
+Fixes a crash when using freetype >= 2.9
+---
+ src/cairo-ft-font.c | 4 ++++
+ 1 file changed, 4 insertions(+)
+
+diff --git a/src/cairo-ft-font.c b/src/cairo-ft-font.c
+index 325dd61b4..981973f78 100644
+--- a/src/cairo-ft-font.c
++++ b/src/cairo-ft-font.c
+@@ -2393,7 +2393,11 @@ skip:
+ done:
+         free (coords);
+         free (current_coords);
++#if HAVE_FT_DONE_MM_VAR
++        FT_Done_MM_Var (face->glyph->library, ft_mm_var);
++#else
+         free (ft_mm_var);
++#endif
+     }
+ }
+ 
+-- 
+2.11.0
+
diff --git a/meta-oe/recipes-graphics/cairo/cairo/CVE-2019-6461.patch b/meta-oe/recipes-graphics/cairo/cairo/CVE-2019-6461.patch
new file mode 100644
index 0000000000..a2dba6cb20
--- /dev/null
+++ b/meta-oe/recipes-graphics/cairo/cairo/CVE-2019-6461.patch
@@ -0,0 +1,20 @@
+There is an assertion in function _cairo_arc_in_direction().
+
+CVE: CVE-2019-6461
+Upstream-Status: Pending
+Signed-off-by: Ross Burton <ross.burton@intel.com>
+
+diff --git a/src/cairo-arc.c b/src/cairo-arc.c
+index 390397bae..1bde774a4 100644
+--- a/src/cairo-arc.c
++++ b/src/cairo-arc.c
+@@ -186,7 +186,8 @@ _cairo_arc_in_direction (cairo_t	  *cr,
+     if (cairo_status (cr))
+         return;
+ 
+-    assert (angle_max >= angle_min);
++    if (angle_max < angle_min)
++       return;
+ 
+     if (angle_max - angle_min > 2 * M_PI * MAX_FULL_CIRCLES) {
+ 	angle_max = fmod (angle_max - angle_min, 2 * M_PI);
diff --git a/meta-oe/recipes-graphics/cairo/cairo/CVE-2019-6462.patch b/meta-oe/recipes-graphics/cairo/cairo/CVE-2019-6462.patch
new file mode 100644
index 0000000000..7c3209291b
--- /dev/null
+++ b/meta-oe/recipes-graphics/cairo/cairo/CVE-2019-6462.patch
@@ -0,0 +1,40 @@
+CVE: CVE-2019-6462
+Upstream-Status: Backport
+Signed-off-by: Quentin Schulz <quentin.schulz@theobroma-systems.com>
+
+From ab2c5ee21e5f3d3ee4b3f67cfcd5811a4f99c3a0 Mon Sep 17 00:00:00 2001
+From: Heiko Lewin <hlewin@gmx.de>
+Date: Sun, 1 Aug 2021 11:16:03 +0000
+Subject: [PATCH] _arc_max_angle_for_tolerance_normalized: fix infinite loop
+
+---
+ src/cairo-arc.c | 4 +++-
+ 1 file changed, 3 insertions(+), 1 deletion(-)
+
+diff --git a/src/cairo-arc.c b/src/cairo-arc.c
+index 390397bae..1c891d1a0 100644
+--- a/src/cairo-arc.c
++++ b/src/cairo-arc.c
+@@ -90,16 +90,18 @@ _arc_max_angle_for_tolerance_normalized (double tolerance)
+ 	{ M_PI / 11.0,  9.81410988043554039085e-09 },
+     };
+     int table_size = ARRAY_LENGTH (table);
++    const int max_segments = 1000; /* this value is chosen arbitrarily. this gives an error of about 1.74909e-20 */
+ 
+     for (i = 0; i < table_size; i++)
+ 	if (table[i].error < tolerance)
+ 	    return table[i].angle;
+ 
+     ++i;
++
+     do {
+ 	angle = M_PI / i++;
+ 	error = _arc_error_normalized (angle);
+-    } while (error > tolerance);
++    } while (error > tolerance && i < max_segments);
+ 
+     return angle;
+ }
+-- 
+2.38.1
+
diff --git a/meta-oe/recipes-graphics/cairo/cairo/CVE-2020-35492.patch b/meta-oe/recipes-graphics/cairo/cairo/CVE-2020-35492.patch
new file mode 100644
index 0000000000..fb6ce5cfdf
--- /dev/null
+++ b/meta-oe/recipes-graphics/cairo/cairo/CVE-2020-35492.patch
@@ -0,0 +1,60 @@
+Fix stack buffer overflow.
+
+CVE: CVE-2020-35492
+Upstream-Status: Backport
+Signed-off-by: Ross Burton <ross.burton@arm.com>
+
+From 03a820b173ed1fdef6ff14b4468f5dbc02ff59be Mon Sep 17 00:00:00 2001
+From: Heiko Lewin <heiko.lewin@worldiety.de>
+Date: Tue, 15 Dec 2020 16:48:19 +0100
+Subject: [PATCH] Fix mask usage in image-compositor
+
+---
+ src/cairo-image-compositor.c                |   8 ++--
+ test/Makefile.sources                       |   1 +
+ test/bug-image-compositor.c                 |  39 ++++++++++++++++++++
+ test/reference/bug-image-compositor.ref.png | Bin 0 -> 185 bytes
+ 4 files changed, 44 insertions(+), 4 deletions(-)
+ create mode 100644 test/bug-image-compositor.c
+ create mode 100644 test/reference/bug-image-compositor.ref.png
+
+diff --git a/src/cairo-image-compositor.c b/src/cairo-image-compositor.c
+index 79ad69f68..4f8aaed99 100644
+--- a/src/cairo-image-compositor.c
++++ b/src/cairo-image-compositor.c
+@@ -2601,14 +2601,14 @@ _inplace_src_spans (void *abstract_renderer, int y, int h,
+ 		    unsigned num_spans)
+ {
+     cairo_image_span_renderer_t *r = abstract_renderer;
+-    uint8_t *m;
++    uint8_t *m, *base = (uint8_t*)pixman_image_get_data(r->mask);
+     int x0;
+ 
+     if (num_spans == 0)
+ 	return CAIRO_STATUS_SUCCESS;
+ 
+     x0 = spans[0].x;
+-    m = r->_buf;
++    m = base;
+     do {
+ 	int len = spans[1].x - spans[0].x;
+ 	if (len >= r->u.composite.run_length && spans[0].coverage == 0xff) {
+@@ -2655,7 +2655,7 @@ _inplace_src_spans (void *abstract_renderer, int y, int h,
+ 				      spans[0].x, y,
+ 				      spans[1].x - spans[0].x, h);
+ 
+-	    m = r->_buf;
++	    m = base;
+ 	    x0 = spans[1].x;
+ 	} else if (spans[0].coverage == 0x0) {
+ 	    if (spans[0].x != x0) {
+@@ -2684,7 +2684,7 @@ _inplace_src_spans (void *abstract_renderer, int y, int h,
+ #endif
+ 	    }
+ 
+-	    m = r->_buf;
++	    m = base;
+ 	    x0 = spans[1].x;
+ 	} else {
+ 	    *m++ = spans[0].coverage;
+-- 
diff --git a/meta-oe/recipes-graphics/cairo/cairo/cairo-get_bitmap_surface-bsc1036789-CVE-2017-7475.diff b/meta-oe/recipes-graphics/cairo/cairo/cairo-get_bitmap_surface-bsc1036789-CVE-2017-7475.diff
new file mode 100644
index 0000000000..7aaad2eedd
--- /dev/null
+++ b/meta-oe/recipes-graphics/cairo/cairo/cairo-get_bitmap_surface-bsc1036789-CVE-2017-7475.diff
@@ -0,0 +1,22 @@
+Cairo: Fix Denial-of-Service Attack due to Logical Problem in Program
+
+https://bugs.freedesktop.org/show_bug.cgi?id=100763
+
+CVE: CVE-2017-7475
+Upstream-Status: Submitted
+
+Signed-off-by: Fan Xin <fan.xin@jp.fujitsu.com>
+
+Index: cairo-1.15.4/src/cairo-ft-font.c
+===================================================================
+--- cairo-1.15.4.orig/src/cairo-ft-font.c
++++ cairo-1.15.4/src/cairo-ft-font.c
+@@ -1149,7 +1149,7 @@ _get_bitmap_surface (FT_Bitmap		     *bi
+     width = bitmap->width;
+     height = bitmap->rows;
+ 
+-    if (width == 0 || height == 0) {
++    if (width == 0 || height == 0 || bitmap->buffer == NULL) {
+ 	*surface = (cairo_image_surface_t *)
+ 	    cairo_image_surface_create_for_data (NULL, format, 0, 0, 0);
+ 	return (*surface)->base.status;
diff --git a/meta-oe/recipes-graphics/cairo/cairo_1.16.0.bb b/meta-oe/recipes-graphics/cairo/cairo_1.16.0.bb
new file mode 100644
index 0000000000..ffb813d290
--- /dev/null
+++ b/meta-oe/recipes-graphics/cairo/cairo_1.16.0.bb
@@ -0,0 +1,106 @@
+SUMMARY = "The Cairo 2D vector graphics library"
+DESCRIPTION = "Cairo is a multi-platform library providing anti-aliased \
+vector-based rendering for multiple target backends. Paths consist \
+of line segments and cubic splines and can be rendered at any width \
+with various join and cap styles. All colors may be specified with \
+optional translucence (opacity/alpha) and combined using the \
+extended Porter/Duff compositing algebra as found in the X Render \
+Extension."
+HOMEPAGE = "http://cairographics.org"
+BUGTRACKER = "http://bugs.freedesktop.org"
+SECTION = "libs"
+
+LICENSE = "(MPL-1.1 | LGPL-2.1-only) & GPL-3.0-or-later"
+LICENSE:${PN} = "MPL-1.1 | LGPL-2.1-only"
+LICENSE:${PN}-dev = "MPL-1.1 | LGPL-2.1-only"
+LICENSE:${PN}-doc = "MPL-1.1 | LGPL-2.1-only"
+LICENSE:${PN}-gobject = "MPL-1.1 | LGPL-2.1-only"
+LICENSE:${PN}-script-interpreter = "MPL-1.1 | LGPL-2.1-only"
+LICENSE:${PN}-perf-utils = "GPL-3.0-or-later"
+# Adapt the licenses for cairo-dbg and cairo-src depending on whether
+# cairo-trace is being built.
+LICENSE:${PN}-dbg = "(MPL-1.1 | LGPL-2.1-only)${@bb.utils.contains('PACKAGECONFIG', 'trace', ' & GPL-3.0-or-later', '', d)}"
+LICENSE:${PN}-src = "(MPL-1.1 | LGPL-2.1-only)${@bb.utils.contains('PACKAGECONFIG', 'trace', ' & GPL-3.0-or-later', '', d)}"
+
+LIC_FILES_CHKSUM = "file://COPYING;md5=e73e999e0c72b5ac9012424fa157ad77 \
+                    ${@bb.utils.contains('PACKAGECONFIG', 'trace', 'file://util/cairo-trace/COPYING-GPL-3;md5=d32239bcb673463ab874e80d47fae504', '', d)}"
+
+
+DEPENDS = "fontconfig glib-2.0 libpng pixman zlib"
+
+SRC_URI = "http://cairographics.org/releases/cairo-${PV}.tar.xz \
+           file://cairo-get_bitmap_surface-bsc1036789-CVE-2017-7475.diff \
+           file://CVE-2018-19876.patch \
+           file://CVE-2019-6461.patch \
+           file://CVE-2019-6462.patch \
+           file://CVE-2020-35492.patch \
+          "
+
+SRC_URI[md5sum] = "f19e0353828269c22bd72e271243a552"
+SRC_URI[sha256sum] = "5e7b29b3f113ef870d1e3ecf8adf21f923396401604bda16d44be45e66052331"
+
+inherit autotools pkgconfig upstream-version-is-even gtk-doc multilib_script
+
+MULTILIB_SCRIPTS = "${PN}-perf-utils:${bindir}/cairo-trace"
+
+X11DEPENDS = "virtual/libx11 libsm libxrender libxext"
+
+PACKAGECONFIG ??= "${@bb.utils.filter('DISTRO_FEATURES', 'directfb', d)} \
+                   ${@bb.utils.contains('DISTRO_FEATURES', 'x11', 'x11 xcb', '', d)} \
+                   ${@bb.utils.contains('DISTRO_FEATURES', 'x11 opengl', 'opengl', '', d)} \
+                   trace"
+PACKAGECONFIG:class-native = "${@bb.utils.contains('DISTRO_FEATURES', 'x11', 'x11 xcb', '', d)}"
+PACKAGECONFIG:class-nativesdk = "${@bb.utils.contains('DISTRO_FEATURES', 'x11', 'x11 xcb', '', d)}"
+
+PACKAGECONFIG[x11] = "--with-x=yes -enable-xlib,--with-x=no --disable-xlib,${X11DEPENDS}"
+PACKAGECONFIG[xcb] = "--enable-xcb,--disable-xcb,libxcb"
+PACKAGECONFIG[directfb] = "--enable-directfb=yes,,directfb"
+PACKAGECONFIG[valgrind] = "--enable-valgrind=yes,--disable-valgrind,valgrind"
+PACKAGECONFIG[egl] = "--enable-egl=yes,--disable-egl,virtual/egl"
+PACKAGECONFIG[glesv2] = "--enable-glesv2,--disable-glesv2,virtual/libgles2"
+PACKAGECONFIG[opengl] = "--enable-gl,--disable-gl,virtual/libgl"
+# trace is under GPLv3
+PACKAGECONFIG[trace] = "--enable-trace,--disable-trace"
+
+EXTRA_OECONF += " \
+    ${@bb.utils.contains('TARGET_FPU', 'soft', '--disable-some-floating-point', '', d)} \
+    --enable-tee \
+"
+
+# We don't depend on binutils so we need to disable this
+export ac_cv_lib_bfd_bfd_openr="no"
+# Ensure we don't depend on LZO
+export ac_cv_lib_lzo2_lzo2a_decompress="no"
+
+do_install:append () {
+	rm -rf ${D}${bindir}/cairo-sphinx
+	rm -rf ${D}${libdir}/cairo/cairo-fdr*
+	rm -rf ${D}${libdir}/cairo/cairo-sphinx*
+	rm -rf ${D}${libdir}/cairo/.debug/cairo-fdr*
+	rm -rf ${D}${libdir}/cairo/.debug/cairo-sphinx*
+	[ ! -d ${D}${bindir} ] ||
+		rmdir -p --ignore-fail-on-non-empty ${D}${bindir}
+	[ ! -d ${D}${libdir}/cairo ] ||
+		rmdir -p --ignore-fail-on-non-empty ${D}${libdir}/cairo
+}
+
+PACKAGES =+ "cairo-gobject cairo-script-interpreter cairo-perf-utils"
+
+SUMMARY:cairo-gobject = "The Cairo library GObject wrapper library"
+DESCRIPTION:cairo-gobject = "A GObject wrapper library for the Cairo API."
+
+SUMMARY:cairo-script-interpreter = "The Cairo library script interpreter"
+DESCRIPTION:cairo-script-interpreter = "The Cairo script interpreter implements \
+CairoScript.  CairoScript is used by tracing utilities to enable the ability \
+to replay rendering."
+
+DESCRIPTION:cairo-perf-utils = "The Cairo library performance utilities"
+
+FILES:${PN} = "${libdir}/libcairo.so.*"
+FILES:${PN}-gobject = "${libdir}/libcairo-gobject.so.*"
+FILES:${PN}-script-interpreter = "${libdir}/libcairo-script-interpreter.so.*"
+FILES:${PN}-perf-utils = "${bindir}/cairo-trace* ${libdir}/cairo/*.la ${libdir}/cairo/libcairo-trace.so"
+
+BBCLASSEXTEND = "native nativesdk"
+
+UPSTREAM_CHECK_REGEX = "cairo-(?P<pver>\d+(\.\d+)+).tar.xz"
diff --git a/meta-oe/recipes-oe-alliance/enigma2/enigma2.bb b/meta-oe/recipes-oe-alliance/enigma2/enigma2.bb
index 5e29588098..596a948d93 100644
--- a/meta-oe/recipes-oe-alliance/enigma2/enigma2.bb
+++ b/meta-oe/recipes-oe-alliance/enigma2/enigma2.bb
@@ -99,7 +99,6 @@ PYTHON_RDEPS = " \
     ${PYTHON_PN}-process \
     ${PYTHON_PN}-image \
     ${PYTHON_PN}-pillow \
-    ${PYTHON_PN}-smtpd \
     ${PYTHON_PN}-six \
     ${PYTHON_PN}-treq \
 "
-- 
2.43.0.windows.1

